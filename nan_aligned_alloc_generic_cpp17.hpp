// Boost Software License - Version 1.0 - August 17th, 2003

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:

// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//ORIGINAL HEADER
/*
Copyright 2014-2015 Glen Joseph Fernandes
(glenjofe@gmail.com)

Distributed under the Boost Software License, Version 1.0.
(http://www.boost.org/LICENSE_1_0.txt)
*/

//ADAPTED FROM THE CODE WRITTEN BY djarek (Damian Jarek) POSTED ON https://cpplang.slack.com/
//ON 06.03.2020

//MODIFIED FOR NAN

#ifndef NAN_ALIGNED_DETAIL_ALIGNED_ALLOC_GENERIC
#define NAN_ALIGNED_DETAIL_ALIGNED_ALLOC_GENERIC

#include "nan_aligned_alloc_is_alignment_cpp17.hpp"
#include <cassert>
#include <cstddef>
#include <cstdlib>
#include <memory>
#include <cstring>

namespace Nan::detail::align {

inline void*
aligned_alloc(std::size_t alignment, std::size_t size) noexcept
{
    assert(is_alignment(alignment));
    constexpr size_t N = alignof(void*);

    if (alignment < N) {
        alignment = N;
    }

    std::size_t n = size + alignment - N;
    void* p = std::malloc(sizeof(void*) + n);
    if (p) {
        void* p2 = static_cast<char*>(p) + sizeof(p);
        auto * const ap = static_cast<char*>(std::align(alignment, size, p2, n));
        std::memcpy(ap - sizeof(p), &p, sizeof(p));

        p = ap;
    }
    return p;
}

inline void
aligned_free(void* ptr) noexcept
{
    if(ptr) {
        void* rp;
        std::memcpy(&rp, static_cast<char*>(ptr) - sizeof(void*), sizeof(void*));
        std::free(rp);
    }
}

}

#endif